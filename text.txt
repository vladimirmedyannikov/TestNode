
Java
Материал из Википедии — свободной энциклопедии
Текущая версия страницы пока не проверялась опытными участниками и может значительно отличаться от версии, проверенной 22 декабря 2015; проверки требуют 24 правки.
Java 220x80px
Класс языка:

объектно-ориентированный, структурный, императивный, функциональный, кроссплатформенный
Появился в:
a
объектно-ориентированный объектно-ориентированный объектно-ориентированный объектно-ориентированный объектно-ориентированный объектно-ориентированный объектно-ориентированный объектно-ориентированный
объектно-ориентированный
объектно-ориентированный
объектно-ориентированный
объектно-ориентированный
объектно-ориентированный
1995
1995
1995
1995
1995
1995
1995
Автор:

Oracle (до 2010 — Sun Microsystems)
Расширение файлов:

.java
Выпуск:

Java Standard Edition 8[1], (18 марта 2014)
Система типов:

строгая, статическая, именованная (англ.), явная (англ.)
Основные реализации:

многочисленные
Диалекты:

Generic Java (англ.), Pizza (англ.)
Испытал влияние:

Objective-C[2], Ада 83, Object Pascal[3], UCSD Pascal[4], Oberon[5][6],C++, C#[7], Smalltalk, Eiffel[8], Mesa (англ.)[9], Modula-3[10], Generic Java (англ.)
Повлиял на:

Ада 2005, C#, Clojure, D, ECMAScript, Groovy, J#, VJ#, JavaScript, PHP, Scala, Python, BeanShell, Kotlin, Gentee
Лицензия:

GNU General Public License / Java Community Process
Сайт:

java.com
Эта статья — о языке программирования. О платформе для создания приложений на основе данного языка см. Java (программная платформа).
Не следует путать с JavaScript.

Java[11] — объектно-ориентированный язык программирования, разработанный компанией Sun Microsystems (в последующем приобретённой компанией Oracle). Приложения Java обычно транслируются в специальный байт-код, поэтому они могут работать на любой виртуальной Java-машине вне зависимости от компьютерной архитектуры. Дата официального выпуска — 23 мая 1995 года.

Содержание

    1 Название
    2 Основные особенности языка
    3 История версий
        3.1 Java 1.0
        3.2 Java 1.2
        3.3 Java 2
        3.4 Java 5.0
        3.5 Java 6
        3.6 Java 7
            3.6.1 Список нововведений
        3.7 Java 8
            3.7.1 Список нововведений
        3.8 Java 9
            3.8.1 Список нововведений
    4 Классификация платформ Java
    5 Java и Microsoft
    6 Java и Android
    7 Применения платформы Java
        7.1 Производительность
    8 Основные возможности
    9 Пространство имён
    10 Пример программы
    11 Основные идеи
        11.1 Примитивные типы
            11.1.1 Преобразования при математических операциях
        11.2 Объектные переменные, объекты, ссылки и указатели
            11.2.1 Дублирование ссылок и клонирование
            11.2.2 Инициализация переменных
            11.2.3 Сборка мусора
        11.3 Классы и функции
        11.4 Конструкторы
            11.4.1 Статические методы и поля
            11.4.2 Завершённость (final)
            11.4.3 Абстрактность
            11.4.4 Интерфейсы
                11.4.4.1 Маркерные интерфейсы
            11.4.5 Шаблоны в Java (generics)
            11.4.6 Проверка принадлежности к классу
    12 Средства разработки ПО
    13 См. также
    14 Примечания
    15 Литература
    16 Ссылки

Название

Изначально язык назывался Oak («Дуб») разрабатывался Джеймсом Гослингом для программирования бытовых электронных устройств. Впоследствии он был переименован в Java и стал использоваться для написания клиентских приложений и серверного программного обеспечения. Назван в честь марки кофе Java, которая, в свою очередь, получила наименование одноимённого острова (Ява), поэтому на официальной эмблеме языка изображена чашка с горячим кофе. Существует и другая версия происхождения названия языка, связанная с аллюзией на кофе-машину как пример бытового устройства, для программирования которого изначально язык создавался.
Основные особенности языка

Программы на Java транслируются в байт-код, выполняемый виртуальной машиной Java (JVM) — программой, обрабатывающей байтовый код и передающей инструкции оборудованию как интерпретатор.
Дюк, талисман Java

Достоинством подобного способа выполнения программ является полная независимость байт-кода от операционной системы и оборудования, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание.

Часто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java:

    применение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (JIT-технология) с возможностью сохранения версий класса в машинном коде,
    широкое использование платформенно-ориентированного кода (native-код) в стандартных библиотеках,
    аппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология Jazelle, поддерживаемая некоторыми процессорами фирмы ARM).

По данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее[12]. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией Google, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на C++[13][14][15].

Идеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине[16]. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры CLI, заложенной в основу платформы .NET компанией Microsoft.
История версий
Основная статья: История версий Java
Java 1.0

Разработка Java началась в 1990 году, первая официальная версия — Java 1.0, — была выпущена только 26 августа 1996 года.
Java 1.2

К 1998 году была разработана обновлённая спецификация JDK 1.2, вышедшая под наименованием Java 2. Язык практически не изменился — было добавлено одно ключевое слово strictfp. Платформа получила следующие дополнения:

    Библиотека Swing для создания графического интерфейса пользователя.
    Коллекции (JSR 166).
    Поддержка файлов Policy и цифровых сертификатов пользователя.
    Библиотека Accessibility.
    Java 2D.
    Поддержка технологии drag-and-drop.
    Полная поддержка Unicode, включая поддержку ввода на японском, китайском и корейском языках.
    Поддержка воспроизведения аудиофайлов нескольких популярных форматов.
    Полная поддержка технологии CORBA.
    JIT-компилятор, улучшенная производительность.
    Усовершенствования инструментальных средств JDK, в том числе поддержка профилирования Java-программ.

Java 2

В данном случае встречается путаница. Выпускались книги, например, Beginning Java 2 by Ivor Horton (Mar 1999), фактически по JDK 1.2 (бывшее название — Java 2). Вместе с тем по сей день такие книги публикуются, например: Х. М. Дейтел, П. Дж. Дейтел, С. И. Сантри. Технологии программирования на Java 2. Распределённые приложения (2011).

В то время, когда, как известно, Java 2 была исторически заменена следующими релизами, подобные названия книг дезориентируют в понимании, о какой же версии Java они написаны на самом деле. Если JDK 1.2 принято считать за Java 2, а авторы книг за Java 2 принимают JDK 7, это приводит к полной путанице.
Java 5.0

Спецификация Java 5.0 была выпущена в сентябре 2004 года. C этой версии изменена официальная индексация, вместо Java 1.5 правильнее называть Java 5.0. Внутренняя же индексация Sun осталась прежней — 1.x. Минорные изменения теперь включаются без изменения индексации, для этого используется слово «Update» или буква «u», например, Java Development Kit 5.0 Update 22. Предполагается, что в обновления могут входить как исправления ошибок, так и небольшие добавления в API, JVM.

В данной версии разработчики внесли в язык целый ряд принципиальных дополнений:

    Перечислимые типы (англ. enum). Ранее отсутствовавшие в Java типы оформлены по аналогии с C++, но при этом имеют ряд дополнительных возможностей.
        Перечислимый тип является полноценным классом Java, то есть может иметь конструктор, поля, методы, в том числе скрытые и абстрактные.
        Перечисление может реализовывать интерфейсы.
        Для перечислений имеются встроенные методы, дающие возможность получения значений типа по имени, символьных значений, соответствующих именам, преобразования между номером и значением, проверки типа на то, что он является перечислимым.
    Аннотации — возможность добавления в текст программы метаданных, не влияющих на выполнение кода, но допускающих использование для получения различных сведений о коде и его исполнении. Одновременно выпущен инструментарий для использования аннотированного кода. Одно из применений аннотаций — упрощение создания тестовых модулей для Java-кода.
    Средства обобщённого программирования (англ. generics) — механизм, аналогичный Eiffel (позже также появились и в C#, принципиально отличаются от шаблонов C++), дающий возможность создавать классы и методы с полями и параметрами произвольного объектного типа. С использованием данного механизма реализованы новые версии коллекций стандартной библиотеки Java.
    Методы с неопределённым числом параметров.
    Autoboxing/Unboxing — автоматическое преобразование между скалярными типами Java и соответствующими типами-обёртками (например, между int — Integer). Наличие такой возможности сокращает код, поскольку исключает необходимость выполнения явных преобразований типов в очевидных случаях.
    Разрешён импорт статических полей и методов.
    В язык введён цикл по коллекции объектов (итератор, англ. foreach).
    Было введено использование Javadoc-комментариев, которые используются для автоматического оформления документации по комментариям в исходном коде.

Java 6

Релиз версии состоялся 11 декабря 2006 года. Изменена официальная индексация — вместо ожидаемой 6.0 версия значится как 6. Минорные изменения, как и в Java 5.0, вносятся в обычные обновления версии, например, Java Standard Edition Development Kit 6 Update 27. Внесены следующие изменения:

    Коллекции — добавлены интерфейсы для организации очереди, работающей с двух сторон коллекции; организовывающие поиск по ближайшему соответствию; блокирующие себя во время ожидания элемента. Организованы новые классы, реализующие перечисленные интерфейсы.
    Добавлена поддержка японского императорского календаря (наряду с уже существующими григорианским и буддийским календарями).
    Доступны классы-потоки для чтения и передачи сжатых данных, с возможностью передачи их по сети. Сняты ограничения на количество файлов в архиве (ранее 64 Кб), длину названия файла (ранее 256 символов) и количество одновременно открытых файлов (ранее 2000 шт).
    Организована система управления кэшем и добавлена поддержка параметра «no-cache» в HTTP-запросе.
    JConsole, графический мониторинг JVM, стала официально поддерживаемой утилитой.
    Java HTTP Server, позволяет создать полноценный HTTP сервер, с минимально необходимыми функциональными свойствами.
    Повысилась скорость вычислений на 70 %, скорость операций ввода-вывода возросла в два раза[17].
    Swing — улучшена работоспособность OpenGL и DirectX; обработка текста на LCD; добавлен GifWriter, для работы с файлами .gif.
    Исправлено большое количество ошибок.

Java 7

Релиз версии состоялся 28 июля 2011 года[18]. В финальную версию Java Standard Edition 7 не были включены все ранее запланированные изменения. Согласно плану развития (план «Б»)[19], включение нововведений будет разбито на две части: Java Standard Edition 7 (без лямбда-исчисления, проекта Jigsaw, и части улучшений Coin) и Java Standard Edition 8 (все остальное), намеченный на конец 2012 года.

В новой версии, получившей название Java Standard Edition 7 (Java Platform, Standard Edition 7), помимо исправления большого количества ошибок, было представлено несколько новшеств. Так, например, в качестве эталонной реализации Java Standard Edition 7 использован не проприетарный пакет JDK, а его открытая реализация OpenJDK, а сам релиз новой версии платформы готовился при тесном сотрудничестве инженеров Oracle с участниками мировой экосистемы Java, комитетом JCP (Java Community Process) и сообществом OpenJDK. Все поставляемые Oracle бинарные файлы эталонной реализации Java Standard Edition 7 собраны на основе кодовой базы OpenJDK, сама эталонная реализация полностью открыта под лицензией GPLv2 с исключениями GNU ClassPath, разрешающими динамическое связывание с проприетарными продуктами. К другим нововведениям относится интеграция набора небольших языковых улучшений Java, развиваемых в рамках проекта Coin, добавлена поддержка языков программирования с динамической типизацией, таких, как Ruby, Python и JavaScript, поддержка загрузки классов по URL, обновлённый XML-стек, включающий JAXP 1.4, JAXB 2.2a и JAX-WS 2.2 и другие[20].

За 5 дней до выхода релиза Java Standard Edition 7 было обнаружено несколько серьёзных ошибок в горячей оптимизации циклов, которая включена по умолчанию и приводит виртуальную машину Java к краху. Специалисты Oracle найденные ошибки за столь короткий срок исправить не могли, но пообещали, что они будут исправлены во втором обновлении (Java 7 Update 2) и частично в первом[21].
Список нововведений

    Поддержка динамически-типизированных языков (InvokeDynamic) — расширение JVM (семантики байт-кода), языка Java[22] для поддержки динамически-типизированных языков.
    Строгая проверка class-файлов — class-файлы версии 51 (Java Standard Edition 7) или более поздней версии должны быть проверены typechecking-верификатором; JVM не должна переключаться на старый верификатор.
    Изменение синтаксиса языка Java (Project Coin) — частичные изменения в языке Java, предназначенные для упрощения общих задач программирования:
        Использование класса String в блоке switch.
        Закрытие используемых ресурсов в блоке try (try-with-resources) — работает при использовании интерфейса AutoCloseable.
        Объединённая обработка исключений в блоке catch (multi-catch exceptions) — перечисление обрабатываемых исключений в catch (… | … | …).
        Повторное выбрасывание исключений (rethrowing exceptions) — передача возникшего исключения «вверх» по стеку вызовов.
        Подчёркивания в числовых литералах для лучшего восприятия больших чисел.
        Изменение вывода типа в Java generic при создании объекта.
        Использование двоичных чисел (binary literals) — префикс «0b» укажет, что используется двоичное число.
        Упрощение вызова методов varargs — уменьшение предупреждений при вызове метода с переменным числом входящих переменных.

    Модификация загрузчика классов (class-loader) — избежание тупиковых ситуаций в неиерархической топологии загрузки классов.
    Закрытие ресурсов, открытых URLClassLoader.
    Обновление коллекций (JSR 166).
    Поддержка Unicode 6.0.
    Отделение языка пользователя и языка пользовательского интерфейса — обновление обработки языков для отделения локали от языка пользовательского интерфейса.
    Новые интерфейсы I/O для платформы Java (nio.2).
    Использование JDBC 4.1 и Rowset 1.1.
    … (не закончено)

Java 8

Релиз версии состоялся 19 марта 2014 года.
Список нововведений

    Полноценная поддержка лямбда-выражений.
    Ключевое слово default в интерфейсах для поддержки функциональности по умолчанию.
    Ссылки на методы.
    Функциональные интерфейсы (предикаты, поставщики и т. д.)
    Потоки (stream) для работы с коллекциями
    Новое API для работы с датами
    … (не закончено)

Java 9
Список нововведений

    Интеграция jigsaw.
    Обновление Process API для лучшего взаимодействия с не-Java процессами операционной системы.
    Новый HTTP-клиент с поддержкой HTTP 2.0, веб-сокетов и заменой устаревшему HttpURLConnection.
    … (не закончено)

Классификация платформ Java

Внутри Java существуют несколько основных семейств технологий:

    Java SE — Java Standard Edition, основное издание Java, содержит компиляторы, API, Java Runtime Environment; подходит для создания пользовательских приложений, в первую очередь — для настольных систем.
    Java EE — Java Enterprise Edition, представляет собой набор спецификаций для создания программного обеспечения уровня предприятия.
    Java ME — Java Micro Edition, создана для использования в устройствах, ограниченных по вычислительной мощности, например, в мобильных телефонах, КПК, встроенных системах;
    JavaFX — технология, являющаяся следующим шагом в эволюции Java как Rich Client Platform; предназначена для создания графических интерфейсов корпоративных приложений и бизнеса.
    Java Card — технология предоставляет безопасную среду для приложений, работающих на смарт-картах и других устройствах с очень ограниченным объёмом памяти и возможностями обработки.

Java и Microsoft

Компанией Microsoft была разработана собственная реализация JVM (MSJVM[23]), включавшаяся в состав различных операционных систем, начиная с Windows 98 (также входила в Internet Explorer от версии 3 и выше, что позволяло использовать MSJVM (Microsoft java virtual machine) в ОС Windows 95 и Windows NT 4 после установки IE3+ на данные ОС).

MSJVM имела существенные отличия от Sun Java, во многом ломающие основополагающую концепцию переносимости программ между разными платформами:

    отсутствие поддержки программного интерфейса вызова удаленных методов (RMI);
    отсутствие поддержки технологии JNI;
    наличие нестандартных расширений, таких, как средства интеграции Java и DCOM, работающих только на платформе Windows.

Тесная интеграция Java с DCOM и Win32 поставила под вопрос кроссплатформенную парадигму языка. Впоследствии это явилось поводом для судебных исков со стороны Sun Microsystems к Microsoft. Суд принял сторону компании Sun Microsystems. В конечном счёте между двумя компаниями была достигнута договорённость о возможности продления срока официальной поддержки пользователей нестандартной Microsoft JVM до конца 2007 года[23].

В 2005 году компанией Microsoft для платформы .NET был представлен Java-подобный язык J#, не соответствующий официальной спецификации языка Java и исключённый впоследствии из стандартного инструментария разработчика Microsoft Visual Studio, начиная с Visual Studio 2008[24].
Java и Android
Основная статья: Android

Язык Java активно используется для создания мобильных приложений под операционную систему Android. При этом программы компилируются в нестандартный байт-код, для использования их виртуальной машиной Dalvik. Для такой компиляции используется дополнительный инструмент, а именно Software Development Kit, разработанный компанией Google.

Разработку приложений можно вести в среде Android Studio, NetBeans, в среде Eclipse, используя при этом плагин Android Development Tools (ADT) или в IntelliJ IDEA. Версия JDK при этом должна быть 5.0 или выше.

8 декабря 2014 года Android Studio признана компанией Google официальной средой разработки под ОС Android.
Применения платформы Java

Следующие успешные проекты реализованы с привлечением Java (J2EE) технологий: RuneScape, Amazon[25][26], eBay[27][28], LinkedIn[29], Yahoo![30].

Следующие компании в основном фокусируются на Java (J2EE) технологиях: SAP, IBM, Oracle. В частности, СУБД Oracle Database включает JVM как свою составную часть, обеспечивающую возможность непосредственного программирования СУБД на языке Java, включая, например, хранимые процедуры[31].
Производительность

Программы, написанные на Java, имеют репутацию более медленных и занимающих больше оперативной памяти, чем написанные на языке C[12]. Тем не менее, скорость выполнения программ, написанных на языке Java, была существенно улучшена с выпуском в 1997—1998 годах так называемого JIT-компилятора в версии 1.1 в дополнение к другим особенностям языка для поддержки лучшего анализа кода (такие, как внутренние классы, класс StringBuffer, упрощенные логические вычисления и т. д.). Кроме того, была произведена оптимизация виртуальной машины Java — с 2000 года для этого используется виртуальная машина HotSpot. По состоянию на февраль 2012 года, код Java 7 приблизительно лишь в 1.8 раза медленнее кода, написанного на языке Си[32].

Некоторые платформы предлагают аппаратную поддержку выполнения для Java[источник не указан 1606 дней]. К примеру, микроконтроллеры, выполняющие код Java на аппаратном обеспечении вместо программной JVM, а также основанные на ARM процессоры, которые поддерживают выполнение байткода Java через опцию Jazelle.
Основные возможности

    автоматическое управление памятью;
    расширенные возможности обработки исключительных ситуаций;
    богатый набор средств фильтрации ввода-вывода;
    набор стандартных коллекций: массив, список, стек и т. п.;
    наличие простых средств создания сетевых приложений (в том числе с использованием протокола RMI);
    наличие классов, позволяющих выполнять HTTP-запросы и обрабатывать ответы;
    встроенные в язык средства создания многопоточных приложений, которые потом были портированы на многие языки (например, python);
    унифицированный доступ к базам данных:

        на уровне отдельных SQL-запросов — на основе JDBC, SQLJ;
        на уровне концепции объектов, обладающих способностью к хранению в базе данных — на основе Java Data Objects (англ.) и Java Persistence API;

    поддержка обобщений (начиная с версии 1.5);
    поддержка лямбд, замыканий, встроенные возможности функционального программирования (с 1.8);
    параллельное выполнение программ [что?].

Пространство имён
Основная статья: Пространство имён (программирование)

Идея пространств имён воплощена в Java-пакетах.

Внутри пакета есть два независимых пространства имен: переменные и методы.
Пример программы

Generics:
Пример использования Generics
[показать]

Reflection:
Пример использования Reflection
[показать]

Аннотаций:
Пример использования Аннотаций
[показать]
Основные идеи
Примитивные типы

В языке Java только 8 примитивных (скалярных, простых) типов: boolean, byte, char, short, int, long, float, double. Существует также вспомогательный девятый примитивный тип — void, однако переменные и поля такого типа не могут быть объявлены в коде, а сам тип используется только для описания соответствующего ему класса, для использования при рефлексии. Кроме того, с помощью класса Void можно узнать, является ли определённый метод типа void: Hello.class.getMethod("main", Array.newInstance(String.class, 0).getClass()).getReturnType() == Void.TYPE.

Длины и диапазоны значений примитивных типов определяются стандартом, а не реализацией, и приведены в таблице. Тип char сделали двухбайтовым для удобства локализации (один из идеологических принципов Java): когда складывался стандарт, уже существовал Unicode-16, но не Unicode-32. Поскольку в результате не осталось однобайтового типа, добавили новый тип byte, причём в Java, в отличие от других языков, он не является беззнаковым. Типы float и double могут иметь специальные значения +\infty, -\infty и «не число» (NaN). Для типа double они обозначаются Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN; для типа float — так же, но с приставкой Float вместо Double. Минимальные и максимальные значения, принимаемые типами float и double, тоже стандартизованы.
Тип 	Длина (в байтах) 	Диапазон или набор значений
boolean 	1 в массивах, 4 в переменных[33] 	true, false
byte 	1 	−128..127
char 	2 	0..216−1, или 0..65535
short 	2 	−215..215−1, или −32768..32767
int 	4 	−231..231−1, или −2147483648..2147483647
long 	8 	−263..263−1, или примерно −9.2·1018..9.2·1018
float 	4 	-(2-2−23)·2127..(2-2−23)·2127, или примерно −3.4·1038..3.4·1038, а также -\infty, \infty, NaN
double 	8 	-(2-2−52)·21023..(2-2−52)·21023, или примерно −1.8·10308..1.8·10308, а также -\infty, \infty, NaN

Такая жёсткая стандартизация была необходима, чтобы сделать язык платформенно-независимым, что является одним из идеологических требований к Java. Тем не менее, одна небольшая проблема с платформенной независимостью всё же осталась. Некоторые процессоры используют для промежуточного хранения результатов 10-байтовые регистры или другими способами улучшают точность вычислений. Для того, чтобы сделать Java максимально совместимой между разными системами, в ранних версиях любые способы повышения точности вычислений были запрещены. Однако это приводило к снижению быстродействия. Выяснилось, что ухудшение точности ради платформенной независимости мало кому нужно, тем более если за это приходится платить замедлением работы программ. После многочисленных протестов этот запрет отменили, но добавили ключевое слово strictfp, запрещающее повышение точности.
Преобразования при математических операциях

В языке Java действуют следующие правила:

    Если один операнд имеет тип double, другой тоже преобразуется к типу double.
    Иначе, если один операнд имеет тип float, другой тоже преобразуется к типу float.
    Иначе, если один операнд имеет тип long, другой тоже преобразуется к типу long.
    Иначе оба операнда преобразуются к типу int.

Данный способ неявного преобразования встроенных типов полностью совпадает с преобразованием типов в C++[34].
Объектные переменные, объекты, ссылки и указатели

В языке Java имеются только динамически создаваемые объекты. Причём переменные объектного типа и объекты в Java — совершенно разные сущности. Переменные объектного типа являются ссылками, то есть неявными указателями на динамически создаваемые объекты. Это подчёркивается синтаксисом описания переменных. Так, в Java нельзя писать:

double a[10][20];
Foo b(30);

а нужно:

double[][] a = new double[10][20];
Foo b = new Foo(30);

При присваиваниях, передаче в подпрограммы и сравнениях объектные переменные ведут себя как указатели, то есть присваиваются, копируются и сравниваются адреса объектов. А при доступе с помощью объектной переменной к полям данных или методам объекта не требуется никаких специальных операций разыменовывания — этот доступ осуществляется так, как если бы объектная переменная была самим объектом.

Объектными являются переменные любого типа, кроме примитивного. Явных указателей в Java нет. В отличие от указателей C, C++ и других языков программирования, ссылки в Java в высокой степени безопасны благодаря жёстким ограничениям на их использование, в частности:

    Нельзя преобразовывать объект типа int или любого другого примитивного типа в указатель или ссылку и наоборот.
    Над ссылками запрещено выполнять операции ++, −−, +, − или любые другие арифметические операции.
    Преобразование типов между ссылками жёстко регламентировано. За исключением ссылок на массивы, разрешено преобразовывать ссылки только между наследуемым типом и его наследником, причём преобразование наследуемого типа в наследующий должно быть явно задано и во время выполнения производится проверка его осмысленности. Преобразования ссылок на массивы разрешены лишь тогда, когда разрешены преобразования их базовых типов, а также нет конфликтов размерности.
    В Java нет операций взятия адреса (&) или взятия объекта по адресу (*). Амперсанд (&) означает всего лишь «побитовое и» (двойной амперсанд — «логическое и»). Однако для булевых типов одиночный амперсанд означает «логическое и», отличающееся от двойного тем, что цепь проверок не прекращается при получении в выражении значения false[35] (напр. a == b && foo() == bar() не повлечёт вызовов foo() и bar() в случае, если a != b, тогда как использование & повлечёт в любом случае.

Благодаря таким специально введенным ограничениям в Java невозможно прямое манипулирование памятью на уровне физических адресов (хотя определено значение ссылки, не указывающей ни на что: null).

Если нужен указатель на примитивный тип, используются классы-обёртки примитивных типов: Boolean, Byte, Character, Short, Integer, Long, Float, Double.
Дублирование ссылок и клонирование

Из-за того, что объектные переменные являются ссылочными, при присваивании не происходит копирования объекта. Так, если написать

Foo foo, bar;
…
bar = foo;

,

то произойдет копирование адреса из переменной foo в переменную bar. То есть foo и bar будут указывать на одну и ту же область памяти, то есть на один и тот же объект; попытка изменить поля объекта, на который ссылается переменная foo, будет менять объект, с которым связана переменная bar, и наоборот. Если же необходимо получить именно ещё одну копию исходного объекта, пользуются или методом (функцией-членом, в терминологии C++) clone (), создающим копию объекта, или (реже) копирующим конструктором (конструкторы в Java не могут быть виртуальными, поэтому экземпляр класса-потомка будет неправильно скопирован конструктором класса-предка; метод клонирования вызывает нужный конструктор и тем самым позволяет обойти это ограничение).

Метод clone() требует, чтобы класс реализовывал интерфейс Cloneable (об интерфейсах см. ниже). Если класс реализует интерфейс Cloneable, по умолчанию clone() копирует все поля (мелкая копия). Если требуется не копировать, а клонировать поля (а также их поля и так далее), надо переопределять метод clone(). Определение и использование метода clone() часто является нетривиальной задачей[36].
Инициализация переменных

Все переменные или требуют явного определения, или автоматически заполняются нулями (0, null, массивом нулей). Таким образом, исчезают гейзенбаги, связанные со случайным использованием неинициализированной памяти, характерные для низкоуровневых языков вроде C.
Сборка мусора

В языке Java невозможно явное удаление объекта из памяти — вместо этого реализована Сборка мусора. Традиционным[источник не указан 2295 дней] приёмом, дающим сборщику мусора «намёк» на освобождение памяти, является присваивание переменной пустого значения null. Это, однако, не значит, что объект, заменённый значением null, будет непременно и немедленно удалён, но есть гарантия, что этот объект будет удалён именно в будущем. Данный приём всего лишь устраняет ссылку на объект, то есть отвязывает указатель от объекта в памяти. При этом следует учитывать, что объект не будет удален сборщиком мусора, пока на него указывает хотя бы одна ссылка из используемых переменных или объектов. Существуют также методы для инициации принудительной сборки мусора, но не гарантируется, что они будут вызваны исполняющей средой, и их не рекомендуется использовать для обычной работы.
Классы и функции

Java не является процедурным языком: любая функция может существовать только внутри класса. Это подчёркивает терминология языка Java, где нет понятий «функция» или «функция-член» (англ. member function), а только метод. В методы превратились и стандартные функции. Например, в Java нет функции sin(), а есть метод Math.sin() класса Math (содержащего, кроме sin(), методы cos(), exp(), sqrt(), abs() и многие другие). Конструкторы в Java не считаются методами. Деструкторов в Java не существует, а метод finalize() ни в коем случае нельзя считать аналогом деструктора.
Конструкторы

Конструктор — это специальный метод, который обязательно вызывается при создании нового объекта, то есть объект (экземпляр класса) не может быть создан без вызова конструктора класса. Не всегда удобно инициализировать все переменные класса при создании его экземпляра, поэтому переменные экземпляра часто объявляют внутри тела конструктора, а инициализируют как аргументы конструктора при создании экземпляра класса. Иногда проще, чтобы какие-то значения были бы созданы по умолчанию при создании объекта. В таком случае переменные объявляются и инициализируются внутри тела конструктора.

Конструктор инициализирует объект непосредственно во время создания. Имя конструктора совпадает с именем класса, включая регистр, а по синтаксису конструктор похож на метод без возвращаемого значения.

private int Cat();  // так выглядит метод по имени Cat
Cat();              // так выглядит конструктор класса Cat

В отличие от метода, конструктор никогда ничего не возвращает.

Конструктор определяет действия, выполняемые при создании объекта класса, и является важной частью класса. Как правило, программисты стараются явно указать конструктор. Если явного конструктора нет, то Java автоматически создаст его (пустым) для использования по умолчанию.

Создадим класс Box с конструктором, который просто установит начальные значения для коробки.

class Box {
    int width; // ширина коробки
    int height; // высота коробки
    int depth; // глубина коробки

    // Конструктор
    Box(int a, int b) {
        width = a;
        height = b;
        depth = 10;
    }

    // вычисляем объём коробки
    int getVolume() {
    	return width * height * depth;
    }
}

...
Статические методы и поля

В Java (как и в C++) используются статические поля и статические методы (англ. static method — в теории программирования их также называют методами класса), которые задаются при помощи ключевого слова static. Статические поля (переменные класса) имеют тот же смысл, что и в C++: каждое такое поле является собственностью класса, поэтому для доступа к статическим полям не требуется создавать экземпляры соответствующего класса.

Например, математические функции, реализованные в классе Math, представляют собой как раз статические методы данного класса. Поэтому можно писать

double x = Math.sin(1);

вместо

Math m = new Math();
double x = m.sin(1);

Поскольку статические методы существуют независимо от объектов (экземпляров класса), они не имеют доступа к обычным (не статическим) полям и методам данного класса. В частности, при реализации статического метода недопустимо использовать идентификатор this.

Благодаря возможности статического импорта, возможно также вызывать статические функции и константы без указания класса, чтобы вместо кода

double x = Math.sin(Math.tan(Math.sqrt(y)) + Math.floor(24.5)) + Math.cos(42 * Math.PI);

писать код

import static java.lang.Math.*;
...
double x = sin(tan(sqrt(y)) + floor(24.5)) + cos(42 * PI);


Завершённость (final)

Ключевое слово final (финальный) имеет разные значения при описании поля, метода или класса.

    Финальное поле класса инициализируется при описании или в конструкторе класса (а статическое поле — в статическом блоке инициализации). Впоследствии его значение не может быть изменено. Если статическое поле класса или переменная проинициализированы константным выражением, они рассматриваются компилятором как именованная константа; в таком случае их значение может быть использовано в операторах switch (для констант типа int), а также для условной компиляции (для констант типа boolean) при использовании с оператором if.
    Значения локальных переменных, а также параметров метода, помеченных ключевым словом final, не могут быть изменены после присвоения. При этом их значения могут использоваться внутри анонимных классов.
    Метод класса, отмеченный словом final, не может быть переопределён при наследовании.
    Финальный класс не может иметь наследников.

Абстрактность

В Java методы, не объявленные явно как static, final или private, являются виртуальными в терминологии C++: при вызове метода, по-разному определённого в базовом и наследующем классах, всегда производится проверка времени выполнения.

Абстрактным методом (модификатор abstract) в Java называется метод, для которого заданы параметры и тип возвращаемого значения, но не задано тело. Абстрактный метод определяется в классах-наследниках. Аналог абстрактного метода в C++ — чисто виртуальная функция (pure virtual function). Для того чтобы в классе можно было описывать абстрактные методы, сам класс тоже должен быть описан как абстрактный. Объекты абстрактного класса создавать нельзя.
Интерфейсы

Высшей степенью абстрактности в Java является интерфейс (модификатор interface). Все методы интерфейса абстрактны: описатель abstract даже не требуется. Интерфейс в Java не считается классом, хотя, по сути, является полностью абстрактным классом. Класс может наследовать/расширять (extends) другой класс или реализовывать (implements) интерфейс. Кроме того, интерфейс может наследовать/расширять другой интерфейс.

В Java класс не может наследовать более одного класса, зато может реализовывать несколько интерфейсов. Множественное наследование интерфейсов не запрещено, то есть один интерфейс может наследоваться от нескольких.

Интерфейсы можно использовать в качестве типов параметров методов. Нельзя создавать экземпляры интерфейсов.
Маркерные интерфейсы

В Java есть интерфейсы, которые не содержат методов для реализации, а специальным образом обрабатываются JVM:

    java.lang.Cloneable
    java.io.Serializable
    java.util.RandomAccess
    java.rmi.Remote

Шаблоны в Java (generics)

Начиная с версии Java 5 в языке появился механизм обобщённого программирования — шаблоны, внешне близкие к шаблонам C++. С помощью специального синтаксиса в описании классов и методов можно указать параметры-типы, которые внутри описания могут использоваться в качестве типов полей, параметров и возвращаемых значений методов.

// Объявление обобщённого класса
class GenericClass<E> {
  E getFirst() { ... }
  void add(E obj) { ... }
}

// Использование обобщённого класса в коде
GenericClass<String> var = new GenericClass<String>();
var.add("qwerty");
String p = var.getFirst();

Допускается обобщённое объявление классов, интерфейсов и методов. Кроме того, синтаксис поддерживает ограниченные объявления типов-параметров: указание в объявлении конструкции вида <T extends A & B & C...> требует, чтобы тип-параметр T реализовывал интерфейсы A, B, C и так далее, а конструкция <T super C> требует, чтобы тип-параметр T был типом C или одним из его предков.

В отличие от шаблонов C#, шаблоны Java не поддерживаются средой исполнения — компилятор просто создаёт байт-код, в котором никаких шаблонов уже нет. Реализация шаблонов в Java принципиально отличается от реализации аналогичных механизмов в C++: компилятор не порождает для каждого случая использования шаблона отдельный вариант класса или метода-шаблона, а просто создаёт одну реализацию байт-кода, содержащую необходимые проверки и преобразования типов. Это приводит к ряду ограничений использования шаблонов в программах на Java.
Проверка принадлежности к классу

В Java можно явно проверить, к какому классу принадлежит объект. Выражение foo instanceof Foo истинно, если объект foo принадлежит классу Foo или его наследнику, или реализует интерфейс Foo (или, в общем виде, наследует класс, который реализует интерфейс, который наследует Foo).

Далее функция getClass(), определённая для всех объектов, выдаёт объект типа Class. Для каждого класса создаётся не более одного описывающего его объекта типа Class, поэтому эти объекты можно сравнивать. Так, например, foo.getClass() == bar.getClass() будет истинно, если объекты foo и bar принадлежат к одному классу.

Кроме того, объект типа Class любого типа можно получить так: Integer.class, Object.class.

Прямое сравнение классов не всегда является оптимальным средством проверки на принадлежность к классу. Зачастую вместо него используют функцию isAssignableFrom(). Эта функция определена у объекта типа Class и принимает объект типа Class в качестве параметра. Таким образом, вызов Foo.class.isAssignableFrom(Bar.class) вернёт true в случае, если Foo является предком класса Bar. Так как все объекты являются потомками типа Object, вызов Object.class.isAssignableFrom() всегда вернёт true.

В паре с упомянутыми функциями объекта типа Class используются также функции isInstance() (эквивалентно instanceof), а также cast() (преобразует параметр в объект выбранного класса).
Средства разработки ПО

    JDK — помимо набора библиотек для платформ Java SE и Java EE, содержит компилятор командной строки javac и набор утилит, также работающих в режиме командной строки.
    NetBeans IDE — свободная интегрированная среда разработки для всех платформ Java — Java ME, Java SE и Java EE. Пропагандируется Oracle, владельцем технологии Java, как базовое средство для разработки ПО на языке Java и других языках (C, C++, PHP, Fortran и др.).
    Eclipse IDE — свободная интегрированная среда разработки для Java SE, Java EE и Java ME[37]. Пропагандируется IBM, одним из важнейших разработчиков корпоративного ПО, как базовое средство для разработки ПО на языке Java и других языках (C, C++, Ruby, Fortran и др.)
    IntelliJ IDEA — среда разработки для платформ Java SE, Java EE и Java ME. Разработчик — компания JetBrains. Распространяется в двух версиях: свободной бесплатной (Community Edition) и коммерческой проприетарной (Ultimate Edition).
    JDeveloper — среда разработки для платформ Java SE, Java EE и Java ME. Разработчик — компания Oracle.
    BlueJ — среда разработки программного обеспечения на языке Java, созданная в основном для использования в обучении, но также подходящая для разработки небольших программ.
    Java для iOS — обучающее приложение и компилятор для iOS.
    Geany — свободная среда разработки программного обеспечения, написанная с использованием библиотеки GTK2

См. также

    Сравнение C# и Java
    Список Java API

Примечания

↑ Показывать компактно

    ↑ Oracle Official Website
    ↑ Java Was Strongly Influenced by Objective-C
    ↑ White Paper. About Microsoft’s «Delegates» Официальный сайт
    ↑ History of Java in Java Application Servers Report TechMetrix Research, 1999
    ↑ Идея динамической кодогенерации взята из диссертации ученика Вирта Микаэля Франца (PC World Russia CD, September 2005)
    ↑ Лекция Н. Вирта в Нижегородском государственном университете им. Н. И. Лобачевского
    ↑ В Java 5.0 было добавлено несколько новых особенностей (foreach, autoboxing, varargs и аннотаций), после того, как они были введены в аналогичный (и конкурирующий) язык C#; см.: http://www.barrycornelius.com/papers/java5/ http://www.levenez.com/lang/
    ↑ Gosling, McGilton. The Java Language Environment. Официальный сайт (май 1996). Проверено ???. Архивировано из первоисточника 22 августа 2011.
    ↑ J. Gosling, B. Joy, G. Steele, G. Brachda. The Java Language Specification, 2nd Edition. Официальный сайт. Проверено ???. Архивировано из первоисточника 22 августа 2011.
    ↑ The A-Z of Programming Languages: Modula-3 — a-z of programming languages — Computerworld
    ↑ Произносится на английском как /ˈdʒɑːvə/, в русском языке встречаются транслитерации «Джава» и «Ява», правообладатели торговой марки предпочитают первую транслитерацию.

Java 6 -server speed ÷ C++ GNU g++ speed | Computer Language Benchmarks Game
↑ Metz, Cade. Google pits C++ against Java, Scala, and Go (англ.). The Register (3 June 2011). Проверено 5 июня 2011. Архивировано из первоисточника 22 августа 2011.
↑ Loop Recognition in C++/Java/Go/Scala (PDF, 0.3 МБ)
↑ В Google провели сравнение производительности C++, Java, Go и Scala
↑ Robert Tolksdorf. Programming languages for the Java Virtual Machine JVM (англ.). is-research GmbH. — Онлайн-каталог альтернативных языков и языковых расширений для JVM. Проверено 5 июня 2009. Архивировано из первоисточника 22 августа 2011.
↑ Результаты тестов
↑ план разработки для JDK7
↑ План Б
↑ Компания Oracle анонсировала выход Java Standard Edition 7  (рус.)
↑ Index corruption and crashes in Apache Lucene Core / Apache Solr with Java 7  (англ.)
↑ Акторное расширение языка Java в среде MPS. - вестник ИТМО. - Вып 6 (94)

    Microsoft Java Virtual Machine Support (англ.). Microsoft (12 сентября 2003). — Официальное заявление Microsoft о программе поддержки MSJVM. Проверено 9 октября 2010. Архивировано из первоисточника 22 августа 2011.
    ↑ Visual J# (рус.). Microsoft (ноябрь 2007). — Официальная информация Microsoft об исключении J# из комплекта Visual Studio 2008. Проверено 10 октября 2010. Архивировано из первоисточника 22 августа 2011.
    ↑ Todd Hoff. Amazon Architecture (англ.) (18 сентября 2007). — Обсуждение архитектуры Amazon с использованием Java-технологий. Проверено 6 июня 2009.
    ↑ Amazon Elastic Compute Cloud (Amazon EC2) (англ.). Amazon Web Services LLC. — Описание технологии и возможностей Amazon EC2 как веб-сервиса. Проверено 6 июня 2009. Архивировано из первоисточника 22 августа 2011.
    ↑ Todd Hoff. eBay Architecture (англ.) (27 мая 2008). — Обсуждение архитектуры eBay на платформе Java. Проверено 6 сентября 2009. Архивировано из первоисточника 22 августа 2011.
    ↑ Randy Shoup, Dan Pritchett. The eBay Architecture (англ.). SD Forum 2006.  ??? (29 ноября 2006). — Презентация по истории развития архитектуры eBay. Проверено 6 июня 2009. Архивировано из первоисточника 22 августа 2011.
    ↑ Brian Guan. The LinkedIn Blog. Blog Archive. Grails at LinkedIn (англ.). LinkedIn.com (11 июня 2008). — История создания системы LinkedIn на основе Java-технологии Grails. Проверено 5 июня 2009. Архивировано из первоисточника 22 августа 2011.
    ↑ Hadoop and Distributed Computing at Yahoo! (англ.). Yahoo!. — Стартовая страница Java-технологии распределённого обслуживания Hadoop на портале разработчиков Yahoo!. Проверено 21 июня 2009. Архивировано из первоисточника 22 августа 2011.
    ↑ OracleJVM and Java Stored Procedures (англ.). Oracle Inc.. — Раздел портала Oracle, посвящённый технологиям Java в составе сервера СУБД Oracle. Проверено 5 июня 2009. Архивировано из первоисточника 22 августа 2011.
    ↑ Ubuntu: Intel® Q6600® quad-core Computer Language Benchmarks. Архивировано из первоисточника 22 июня 2012.
    ↑ JVM не имеет поддержки для переменных типа boolean, поэтому они представляются в виде значений типа int. Однако массивы boolean[] поддерживаются. VM Spec The Structure of the Java Virtual Machine
    ↑ Бьярн Страуструп. Язык программирования С++ = The C++ Programming Language. — М.—СПб.: Бином, Невский диалект, 2008. — 1104 с. — 5000 экз. — ISBN 5-7989-0226-2; ISBN 5-7940-0064-3; ISBN 0-201-70073-5.
    ↑ Java Language Specification Third Edition — http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.22.2
    ↑ Object (Java 2 Platform Standart Edition версии 1.4.2) (англ.). Sun Microsystems. — Ссылка на документацию к методу Object.clone(). Проверено 6 сентября 2009. Архивировано из первоисточника 22 августа 2011.
    ↑ Pulsar - Eclipse Mobile Tools Platform (англ.). Eclipse. — Проект eclipse для мобильных разработчиков. Проверено 23 марта 2011. Архивировано из первоисточника 22 августа 2011.

Литература

    Герберт Шилдт. Java 8. Полное руководство, 9-е издание = Java 8. The Complete Reference, 9th Edition. — М.: «Вильямс», 2015. — 1376 с. — ISBN 978-5-8459-1918-2.
    Кей С. Хорстманн. Java SE 8. Вводный курс = Java SE 8 for the Really Impatient. — М.: «Вильямс», 2014. — 208 с. — ISBN 978-5-8459-1900-7.
    Фрэд Лонг, Дхрув Мохиндра, Роберт С. Сикорд, Дин Ф. Сазерленд, Дэвид Свобода. Руководство для программиста на Java: 75 рекомендаций по написанию надежных и защищённых программ = Java Coding Guidelines: 75 Recommendations for Reliable and Secure Programs. — М.: «Вильямс», 2014. — 256 с. — ISBN 978-5-8459-1897-0.
    Кей С. Хорстманн, Гари Корнелл. Java. Библиотека профессионала, том 1. Основы. 9-е издание = Core Java, Volume I: Fundamentals (9th Edition). — М.: «Вильямс», 2013. — 864 с. — ISBN 978-5-8459-1869-7.
    Барри Берд. Java 8 для чайников = Java For Dummies, 6th edition. — М.: «Диалектика», 2015. — 400 с. — ISBN 978-5-8459-1928-1.
    Джеймс Гослинг, Билл Джой, Гай Стил, Гилад Брача, Алекс Бакли. Язык программирования Java SE 8. Подробное описание, 5-е издание = The Java Language Specification, Java SE 8 Edition (5th Edition) (Java Series). — М.: «Вильямс», 2015. — 672 с. — ISBN 978-5-8459-1875-8.
    Джошуа Блох. Java. Эффективное программирование = Effective Java. — М.: Лори, 2002. — 224 с. — ISBN 5-85582-169-2.
    Монахов Вадим. Язык программирования Java и среда NetBeans. — 3-е изд. — СПб.: БХВ-Петербург, 2011. — 704 с. — ISBN 978-5-9775-0671-7.
    Брюс Эккель. Философия Java = Thinking in Java. — 3-е изд. — СПб.: Питер, 2003. — 976 с. — ISBN 5-88782-105-1.

Ссылки
Логотип Викиучебника
Имеется викиучебник по теме
«Java»
Логотип Викисловаря
В Викисловаре есть статья «java»

    Автономный установщик последней версии Java
    7 версия Java
    Архив всех версий
    Официальный сайт
    Bruce Eckel’s Free Electronic Books (англ.) — свободно распространяемые электронные версии книг Брюса Эккеля по C++ и Java вместе с исходным кодом
    W. Kahan, Joseph D. Darcy. How Java’s Floating-Point Hurts Everyone Everywhere
    Java™ Platform, Standard Edition 6 API Specification

[показать] Просмотр этого шаблона Java
[скрыть]
п • о • р
Языки программирования
Хронология

    Ассемблер BASIC C C++ C# COBOL Fortran Java JavaScript (JS) Lisp Pascal Perl PHP Python Ruby Smalltalk Visual Basic .NET (VB.NET)

Category Категория

    Non-article page Сравнение List-Class article Списки:

    По категориям Генеалогический Не основанные на английском

Категории:

    Появились в 1995 годуЯзыки программирования по алфавитуJavaЯзыки веб-программированияТипобезопасные языки программированияЯзыки программирования с автоматическим управлением памятью

Навигация

    Вы не представились системе
    Обсуждение
    Вклад
    Создать учётную запись
    Войти

    Статья
    Обсуждение

    Читать
    Текущая версия
    Править
    Править вики-текст
    История

    Заглавная страница
    Рубрикация
    Указатель А — Я
    Избранные статьи
    Случайная статья
    Текущие события

Участие

    Сообщить об ошибке
    Портал сообщества
    Форум
    Свежие правки
    Новые страницы
    Справка
    Пожертвовать

Инструменты

    Ссылки сюда
    Связанные правки
    Спецстраницы
    Постоянная ссылка
    Сведения о странице
    Цитировать страницу

Печать/экспорт

    Создать книгу
    Скачать как PDF
    Версия для печати

В других проектах

    Викисклад
    Викиучебник
    Викиданные

На других языках

    Acèh
    Afrikaans
    አማርኛ
    العربية
    অসমীয়া
    Azərbaycanca
    تۆرکجه
    Žemaitėška
    Беларуская
    Беларуская (тарашкевіца)‎
    Български
    বাংলা
    Bosanski
    ᨅᨔ ᨕᨘᨁᨗ
    Català
    Mìng-dĕ̤ng-ngṳ̄
    کوردیی ناوەندی
    Corsu
    Čeština
    Чӑвашла
    Cymraeg
    Dansk
    Deutsch
    Ελληνικά
    English
    Esperanto
    Español
    Eesti
    Euskara
    فارسی
    Suomi
    Français
    Gaeilge
    Galego
    ગુજરાતી
    客家語/Hak-kâ-ngî
    עברית
    हिन्दी
    Hrvatski
    Kreyòl ayisyen
    Magyar
    Հայերեն
    Interlingua
    Bahasa Indonesia
    Íslenska
    Italiano
    日本語
    ქართული
    Qaraqalpaqsha
    Қазақша
    ಕನ್ನಡ
    한국어
    Кыргызча
    Latina
    Ligure
    Lietuvių
    Latviešu
    Македонски
    മലയാളം
    Монгол
    मराठी
    Bahasa Melayu
    မြန်မာဘာသာ
    नेपाली
    Nederlands
    Norsk nynorsk
    Norsk bokmål
    Occitan
    ਪੰਜਾਬੀ
    Polski
    Português
    Română
    Саха тыла
    Scots
    Srpskohrvatski / српскохрватски
    සිංහල
    Simple English
    Slovenčina
    Slovenščina
    Soomaaliga
    Shqip
    Српски / srpski
    Svenska
    தமிழ்
    తెలుగు
    Тоҷикӣ
    ไทย
    Tagalog
    Türkçe
    Татарча/tatarça
    Українська
    Oʻzbekcha/ўзбекча
    Vèneto
    Tiếng Việt
    Winaray
    吴语
    中文
    Bân-lâm-gú
    粵語

Править ссылки

    Последнее изменение этой страницы: 06:32, 24 февраля 2016.
    Текст доступен по лицензии Creative Commons Attribution-ShareAlike; в отдельных случаях могут действовать дополнительные условия. Подробнее см. Условия использования.
    Wikipedia® — зарегистрированный товарный знак некоммерческой организации Wikimedia Foundation, Inc.
    Свяжитесь с нами

    Политика конфиденциальности
    Описание Википедии
    Отказ от ответственности
    Разработчики
    Соглашение о Cookie
    Мобильная версия

    Wikimedia Foundation
    Powered by MediaWiki
